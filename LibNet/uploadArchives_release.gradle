//apply plugin: 'maven'
//uploadArchives{
//    repositories {
//        mavenDeployer{
//            //存放库的maven地址
//            repository(url : 'http://10.25.84.18:8089/nexus/content/repositories/ANDROID-RELEASE/'){
//              //repository(url : 'http://10.25.84.18:8089/nexus/content/repositories/Android-Release/'){
//                authentication(userName : 'admin', password : 'admin123')
//            }
//
//            pom.project{
//                groupId "com.pasc.lib"
//                artifactId "net"
//                version rootProject.ext.aarLibNetVersion
//                packaging "aar"
//            }
//        }
//    }
//
//}
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'
//configurations {
//    deployerJars
//}
//
//repositories {
//    mavenCentral()
//}
//
//// 判断版本是Release or Snapshots
//def isReleaseBuild() {
//    return !VERSION.contains("SNAPSHOT");
//}
//
//// 获取仓库url
//def getRepositoryUrl() {
//    return isReleaseBuild() ? RELEASE_URL : SNAPSHOT_URL;
//}
//
//// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
//task androidJavadocs(type: Javadoc) {
//    // 设置源码所在的位置
//    source = android.sourceSets.main.java.sourceFiles
//}
//
//// 生成javadoc.jar
//task androidJavadocsJar(type: Jar) {
//    // 指定文档名称
//    classifier = 'javadoc'
//    from androidJavadocs.destinationDir
//}
//
//// 生成sources.jar
//task androidSourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.sourceFiles
//}

//// 产生相关配置文件的任务
//artifacts {
//    archives androidSourcesJar
//    archives androidJavadocsJar
//}

//uploadArchives {
//    repositories {
//        mavenDeployer {
//            beforeDeployment {
//                MavenDeployment deployment -> signing.signPom(deployment)
//            }
//
//            pom.version = VERSION
//            pom.artifactId = ARTIFACT_ID
//            pom.groupId = GROUP_ID
//            pom.packaging = TYPE
//            pom.description = DESCRIPTION
//            repository(url:"file:///Users/yan/.m2/repository/org") {
//                authentication(userName: NAME, password: PASSWORD) // maven授权信息
//            }
//        }
//    }
//}



// 唯一标识
def GROUP_ID = "com.gitee.AndroidLee0316"
// 项目名称
def ARTIFACT_ID = "zxs_net"
// 版本号
def VERSION = "1.0.0"

group GROUP_ID  //一定要加入，否者发布编译时报错
version VERSION

//task generateSourcesJar(type: Jar) {
//    from android.sourceSets.main.java.srcDirs
//    classifier 'sources'
//}
//afterEvaluate {
//    publishing {
//        publications {
//            // 定义一个名为 Production 的发布
//            release(MavenPublication) {
//
//                groupId GROUP_ID
//                artifactId ARTIFACT_ID
//                version VERSION
////             必须有这个 否则不会上传AAR包
//                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
//                // 上传source，这样使用方可以看到方法注释
//                artifact generateSourcesJar
////            artifact "$buildDir/outputs/aar/${project.getName()}-debug.aar" //要上传的aar路径
//            }
//        }
//    }
//}


publishing {
    // 配置maven 仓库
    repositories { RepositoryHandler handler ->
        handler.mavenLocal()  // 发布到默认的 本地maven 仓库 ，路径： USER_HOME/.m2/repository/  或 setting.xml中配置的路径
    }

    // publications 用于定义发布任务的配置块
    publications {
        // 这个 aarAndroid 可以随便填，只是一个任务名字而已(如果有多渠道，整段在下面多复制一份)
        // MavenPublication必须有，这个是调用的任务类
        aarAndroid(MavenPublication) {
            // 这里头是artifacts的配置信息，不填会采用默认的
            groupId GROUP_ID
            artifactId ARTIFACT_ID
            version VERSION

            // 增加上传源码的 task
            artifact sourceJar
            // 必须有这个 否则不会上传AAR包  将bundleReleaseAar任务的单个输出文件作为发布的AAR文件。这样，该AAR文件就会成为 MavenPublication 的 artifact 并进行发布
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
        }
    }
}

// 增加上传源码的task
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

////
//
//// 进行数字签名
//signing {
//    // 当 发布版本 & 存在"uploadArchives"任务时，才执行
//    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
//    sign configurations.archives
//}